#!/usr/bin/python3
import argparse
import logging.config
from bampkgbuild.docker import docker

try:
    from colorlog import ColoredFormatter
except ImportError:
    ColoredFormatter = None


logger = logging.getLogger(__name__)


def setup_logging():
    if ColoredFormatter is not None:
        formatter = ColoredFormatter(
            "\n%(log_color)s%(asctime)s %(levelname)-8s %(message)s",
            datefmt="%m-%d %H:%M",
            reset=True,
            log_colors={
                'DEBUG':    'cyan',
                'INFO':     'green',
                'WARNING':  'yellow',
                'ERROR':    'red',
                'CRITICAL': 'red',
            }
        )
    else:
        formatter = logging.Formatter(
            "\n%(asctime)s %(levelname)-8s "
            "%(message)s",
            datefmt="%m-%d %H:%M",
        )

    console = logging.StreamHandler()
    console.setLevel(logging.DEBUG)
    console.setFormatter(formatter)

    root = logging.getLogger('')
    root.setLevel(logging.DEBUG)
    root.addHandler(console)


def main():
    setup_logging()

    parser = argparse.ArgumentParser(
        description="Download Debian source/binary packages.")

    parser.add_argument(
        "--distribution",
        choices=[
                 'stretch', 'stretch-security',
                 'buster', 'buster-security',
                 'bullseye',
                 'sid',
                 ],
        required=True,
        help="The distribution to use.",
    )

    parser.add_argument(
        "--architecture",
        choices=['i386', 'amd64'],
        required=True,
        help="The build Architecture.",
    )

    parser.add_argument(
        "--download",
        choices=[
                 'binary',
                 'source',
                 'binaries',
                 ],
        required=True,
        help="What do download.",
    )

    parser.add_argument(
        "package",
        nargs='+',
        help=(
            "What packages. If --download=binary, this must "
            "be a binary package. Otherwise a source package is expected.",
        )
    )

    args = parser.parse_args()

    distribution = args.distribution
    architecture = args.architecture
    chroot = f"brianmay/debian-{architecture}:{distribution}"

    with docker(chroot) as chroot:
        chroot.check_call(["apt-get", "update", "--yes"], root=True)
        chroot.check_call(["apt-get", "upgrade", "--yes"], root=True)

        for package in args.package:
            if args.download == "source":
                chroot.check_call(["apt-get", "source", package], root=True)
            elif args.download == "binaries":
                output = chroot.check_output(
                    [
                        "grep-aptavail",
                        "--no-field-names",
                        "--show-field", "Package",
                        "-Sr", fr"^{package}\($\| \)"
                    ],
                    root=True
                )
                output = output.decode()
                binaries = output.split("\r\n")
                binaries = filter(None, binaries)
                binaries = set(binaries)
                for binary in binaries:
                    chroot.check_call(["apt-get", "download", binary], root=True)
            elif args.download == "binary":
                chroot.check_call(["apt-get", "download", package], root=True)
            else:
                raise RuntimeError("Invalid value of args.download")

        chroot.get_files("/build/.", ".")


if __name__ == "__main__":
    main()
