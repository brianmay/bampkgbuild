#!/usr/bin/env python
import argparse
import os
import os.path
import tempfile
import shutil
import subprocess
import schroot
import re
from email.Utils import formatdate
from debian import deb822
from debian import changelog
from contextlib import contextmanager
import logging.config
try:
    from colorlog import ColoredFormatter
except ImportError:
    ColoredFormatter = None


logger = logging.getLogger(__name__)


def setup_logging():
    if ColoredFormatter is not None:
        formatter = ColoredFormatter(
            "\n%(log_color)s%(asctime)s %(levelname)-8s %(message)s",
            datefmt="%m-%d %H:%M",
            reset=True,
            log_colors={
                'DEBUG':    'cyan',
                'INFO':     'green',
                'WARNING':  'yellow',
                'ERROR':    'red',
                'CRITICAL': 'red',
            }
        )
    else:
        formatter = logging.Formatter(
            "\n%(asctime)s %(levelname)-8s "
            "%(message)s",
            datefmt="%m-%d %H:%M",
        )

    console = logging.StreamHandler()
    console.setLevel(logging.DEBUG)
    console.setFormatter(formatter)

    root = logging.getLogger('')
    root.setLevel(logging.DEBUG)
    root.addHandler(console)


def check_call(cmd):
    logger.debug(" ".join(cmd))
    return subprocess.check_call(cmd)


def build_src(src_dir):
    changelog_file = os.path.join(src_dir, "debian/changelog")
    cl = changelog.Changelog(open(changelog_file))

    parent_dir = os.path.join(src_dir, "..")

    if os.path.isdir(os.path.join(src_dir, ".git")):

        with chdir(src_dir):
            check_call([
                "git-buildpackage",
                "--git-builder=debuild -i -I -S"])

    else:
        abs_src_dir = os.path.abspath(src_dir)
        src_name = os.path.basename(abs_src_dir)

        with chdir(parent_dir):

            check_call([
                "dpkg-source",
                "-b", src_name])

    dsc_file = "%s_%s.dsc" % (cl.package, cl.version)
    dsc_file = os.path.join(parent_dir, dsc_file)
    return dsc_file


def build(tmp_dir, dsc_path,
          distribution, architecture, arch_all, source,
          add_to_version):
    d = deb822.Dsc(open(dsc_path))

    src_dir = os.path.dirname(dsc_path)
    dsc_file = os.path.basename(dsc_path)

    src_path = dsc_path
    dst_path = os.path.join(tmp_dir, dsc_file)
    shutil.copyfile(src_path, dst_path)

    for f in d['files']:
        src_path = os.path.join(src_dir, f['name'])
        dst_path = os.path.join(tmp_dir, f['name'])
        shutil.copyfile(src_path, dst_path)

    build_dir = os.path.join(tmp_dir, "build")

    os.chdir(tmp_dir)

    if add_to_version is not None:
        check_call(["dpkg-source", "-x", dsc_file, build_dir])

        os.chdir(build_dir)

        changelog_file = "debian/changelog"
        cl = changelog.Changelog(open(changelog_file))
        version = cl.get_version()
        version = str(version)

        m = re.search("^(.*)~bpo\d\d\+(\d+)$", version)
        if m is not None:
            version = m.group(1)
            offset = int(m.group(2))
            offset = "+" + str(offset) + ".1"
        else:
            offset = "+1"

        version = version + add_to_version + offset

        cl.new_block(
            package=cl.package,
            version=version,
            distributions=distribution,
            urgency="low",
            author="Brian May <bam@debian.org>",
            date=formatdate(),
        )
        cl.add_change('')
        cl.add_change("  * Rebuild for %s." % distribution)
        cl.add_change('')
        cl.write_to_open_file(open(changelog_file, "w"))

        os.chdir(tmp_dir)
        check_call([
            "dpkg-source",
            "-b", "build"])

        dsc_file = "%s_%s.dsc" % (cl.package, cl.version)

    if arch_all:
        arch_all = "--arch-all"
    else:
        arch_all = "--no-arch-all"

    if source:
        source = "--source"
    else:
        source = "--no-source"

    check_call([
        "sbuild",
        arch_all, source,
        "--dist", distribution,
        "--build", architecture,
        "--host", architecture,
        "--chroot", "%s-%s" % (distribution, architecture),
        "--force-orig-source",
        dsc_file])

    changes_file = None
    for name in os.listdir(tmp_dir):
        if name.endswith(".changes"):
            if changes_file is not None:
                raise RuntimeError("Found more then one .changes files")
            changes_file = name

    if changes_file is None:
        raise RuntimeError("Could not find .changes files")

    return changes_file


def sign(changes_file):
    check_call(["debsign", changes_file])


def lint(changes_file, chroot):
    with schroot.schroot(chroot) as chroot:
        chroot.check_call([
            "apt-get", "--yes",
            "install", "lintian"], user="root")
#        chroot.check_call([
#            "apt-get", "--yes", "-t", "experimental",
#            "install", "lintian4python"], user="root")
        chroot.check_call(["lintian", changes_file])
#        chroot.check_call(["lintian4py", changes_file])


def test(changes_file, chroot, test_mode):
    if test_mode == "none":
        return

    build_dir = os.path.dirname(changes_file)
    d = deb822.Changes(open(changes_file))

    debs = []
    for f in d['files']:
        if f['name'].endswith(".deb"):
            debs.append(os.path.join(build_dir, f['name']))

    with schroot.schroot(chroot) as chroot:
        chroot.check_call(["dpkg", "--unpack", "--"] + debs, user="root")
        chroot.check_call(["apt-get", "--yes", "-f", "install"], user="root")

        if test_mode == "auto":
            pass
        elif test_mode == "manual":
            chroot.check_call(["bash"], user="root")
        else:
            raise RuntimeError("Unknown test mode %s" % test_mode)


def upload_debian(server, delayed, changes_file):
    if delayed > 0:
        check_call(["dput", "--delayed=%d" % delayed, server, changes_file])
    else:
        check_call(["dput", server, changes_file])


def upload_pypi(tmp_dir, dsc_path):
    dsc_file = os.path.abspath(dsc_path)
    build_dir = os.path.join(tmp_dir, "build")

    os.chdir(tmp_dir)
    check_call(["dpkg-source", "-x", dsc_file, build_dir])

    os.chdir(build_dir)
    check_call(["./setup.py", "sdist", "upload"])


@contextmanager
def temp_dir():
    tmp_dir = tempfile.mkdtemp()
    cur_dir = os.getcwd()
    try:
        yield tmp_dir
    finally:
        os.chdir(cur_dir)
        shutil.rmtree(tmp_dir)


@contextmanager
def chdir(directory):
    old_dir = os.getcwd()
    try:
        os.chdir(directory)
        yield old_dir
    finally:
        os.chdir(old_dir)


def main():
    setup_logging()

    parser = argparse.ArgumentParser(
        description="Build Debian packages with sbuild.")

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "--dsc",
        dest="dsc_file",
        help="Act on dsc file.")
    group.add_argument(
        "--working",
        dest="working_dir",
        help="Act on tree in working directory.")

    parser.add_argument(
        "--upload",
        choices=['vpac', 'debian', 'pypi'],
        action="append",
        default=[],
        help="upload destinations")

    parser.add_argument(
        "--distributions",
        choices=['squeeze', 'wheezy', 'jessie', 'sid'],
        action="append",
        default=[],
        help="build distributions")

    parser.add_argument(
        "--delayed",
        choices=range(0, 15+1), default=0,
        type=int,
        help="Upload to a DELAYED queue, rather than the usual Incoming. "
             "This takes an argument from 0 to 15. Note  that  a "
             "delay of 0 is different from no delay at all.")

    parser.add_argument(
        "--test",
        choices=['none', 'auto', 'manual'],
        default='auto',
        help="how to test?")

    args = parser.parse_args()

    if args.working_dir:
        dsc_file = build_src(args.working_dir)
    else:
        dsc_file = args.dsc_file

    distributions = set(args.distributions)
    if len(distributions) == 0:
        if 'debian' in args.upload:
            distributions.add("sid")
        if 'vpac' in args.upload:
            distributions.add("sid")
            distributions.add("wheezy")

    arch_all = True
    source = True
    for architecture in ['amd64', 'i386']:

        if 'sid' in distributions:
            with temp_dir() as tmp_dir:
                changes_file = build(
                    tmp_dir, dsc_file,
                    "unstable", architecture, arch_all, source,
                    None)
                sign(changes_file)
                lint(changes_file, "unstable-%s" % architecture)
                test(changes_file, "unstable-%s" % architecture, args.test)
                if 'debian' in args.upload:
                    upload_debian("ftp-master", args.delayed, changes_file)
                if 'vpac' in args.upload:
                    upload_debian("vpac", 0, changes_file)

        if 'wheezy' in distributions:
            with temp_dir() as tmp_dir:
                changes_file = build(
                    tmp_dir, dsc_file,
                    "wheezy", architecture, arch_all, source,
                    "~bpo70")
                sign(changes_file)
                test(changes_file, "wheezy-%s" % architecture, args.test)
                if 'vpac' in args.upload:
                    upload_debian("vpac", 0, changes_file)

        if 'squeeze' in distributions:
            with temp_dir() as tmp_dir:
                changes_file = build(
                    tmp_dir, dsc_file,
                    "squeeze", architecture, arch_all, source,
                    "~bpo60")
                sign(changes_file)
                test(changes_file, "squeeze-%s" % architecture, args.test)
                if 'vpac' in args.upload:
                    upload_debian("vpac", 0, changes_file)

        arch_all = False
        source = False

    if 'pypi' in args.upload:
        with temp_dir() as tmp_dir:
            upload_pypi(tmp_dir, dsc_file)

if __name__ == "__main__":
    main()
