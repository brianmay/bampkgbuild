#!/usr/bin/python3
import argparse
import sys
import os
import os.path
import tempfile
import shutil
import subprocess
import re
from email.utils import formatdate
from debian import deb822
from debian import changelog
from contextlib import contextmanager
import logging.config
from bampkgbuild.docker import docker
try:
    from colorlog import ColoredFormatter
except ImportError:
    ColoredFormatter = None


logger = logging.getLogger(__name__)


def setup_logging():
    if ColoredFormatter is not None:
        formatter = ColoredFormatter(
            "\n%(log_color)s%(asctime)s %(levelname)-8s %(message)s",
            datefmt="%m-%d %H:%M",
            reset=True,
            log_colors={
                'DEBUG':    'cyan',
                'INFO':     'green',
                'WARNING':  'yellow',
                'ERROR':    'red',
                'CRITICAL': 'red',
            }
        )
    else:
        formatter = logging.Formatter(
            "\n%(asctime)s %(levelname)-8s "
            "%(message)s",
            datefmt="%m-%d %H:%M",
        )

    console = logging.StreamHandler()
    console.setLevel(logging.DEBUG)
    console.setFormatter(formatter)

    root = logging.getLogger('')
    root.setLevel(logging.DEBUG)
    root.addHandler(console)


def check_call(cmd):
    logger.debug(" ".join(cmd))
    return subprocess.check_call(cmd)


def deb_build_src(src_dir):
    changelog_file = os.path.join(src_dir, "debian/changelog")
    cl = changelog.Changelog(open(changelog_file))
    parent_dir = os.path.join(src_dir, "..")

    if os.path.isdir(os.path.join(src_dir, ".git")):

        with chdir(src_dir):
            check_call([
                "gbp", "buildpackage",
                "--git-ignore-branch", "--git-ignore-new",
                "--git-builder=debuild --no-lintian -i -I -S -nc",
                "--no-check-builddeps",
            ])

    else:
        src_abs = os.path.abspath(src_dir)
        src_name = os.path.basename(src_abs)

        with chdir(parent_dir):

            check_call([
                "dpkg-source",
                "-b", src_name])

    # remove epoch for filename
    version = re.sub(r'^\d+:', '', str(cl.version), 1)
    dsc_file = "%s_%s.dsc" % (cl.package, version)
    dsc_file = os.path.join(parent_dir, dsc_file)
    return dsc_file


def deb_copy_source(tmp_dir, dsc_path):

    src_dir = os.path.dirname(dsc_path)
    dst_dir = tmp_dir
    dsc_file = os.path.basename(dsc_path)

    d = deb822.Dsc(open(dsc_path))

    src_path = dsc_path
    dst_path = os.path.join(dst_dir, dsc_file)
    shutil.copyfile(src_path, dst_path)

    for f in d['files']:
        src_path = os.path.join(src_dir, f['name'])
        dst_path = os.path.join(dst_dir, f['name'])
        shutil.copyfile(src_path, dst_path)

    dsc_path = os.path.join(dst_dir, dsc_file)
    return dsc_path


def deb_update_source(tmp_dir, dsc_path, distribution, add_to_version):

    dsc_file = os.path.basename(dsc_path)
    build_dir = os.path.join(tmp_dir, "source")

    with chdir(tmp_dir):
        check_call(["dpkg-source", "-x", dsc_file, build_dir])

    changelog_file = "debian/changelog"
    changelog_path = os.path.join(build_dir, changelog_file)

    cl = changelog.Changelog(open(changelog_path))

    first_block = cl[0]
    version = str(first_block.version)

    write_changelog = False
    m = re.search(r"^(.*)(~.*)\+(\d+)$", version)
    if m is not None:
        version_prefix = m.group(1)
        offset = m.group(3)
        new_version = version_prefix + add_to_version + "+" + offset

        if (version != new_version
                or first_block.distributions != distribution):

            write_changelog = True
            first_block.version = new_version
            first_block.distributions = distribution
    else:
        new_version = version + add_to_version + "+1"

        write_changelog = True
        cl.new_block(
            package=cl.package,
            version=new_version,
            distributions=distribution,
            urgency="low",
            author="Brian May <bam@debian.org>",
            date=formatdate(),
        )
        cl.add_change('')
        cl.add_change("  * Rebuild for %s." % distribution)
        cl.add_change('')

    if write_changelog:
        cl.write_to_open_file(open(changelog_path, "w"))

    control_file = "debian/control"
    control_path = os.path.join(build_dir, control_file)

    control_file_tmp = "debian/control.tmp"
    control_path_tmp = os.path.join(build_dir, control_file_tmp)

    with open(control_path, 'rb') as in_file:
        with open(control_path_tmp, "wb") as out_file:
            for d in deb822.Deb822.iter_paragraphs(in_file):
                d['Bugs'] = 'mailto:Brian May <brian@linuxpenguins.xyz>'
                d.dump(out_file)
                out_file.write(b"\n")

    os.rename(control_path_tmp, control_path)

    with chdir(tmp_dir):
        check_call([
            "dpkg-source",
            "-b", "source"])

    version = re.sub(r'^\d+:', '', str(cl.version), 1)
    dsc_file = "%s_%s.dsc" % (cl.package, version)
    dsc_path = os.path.join(tmp_dir, dsc_file)

    return dsc_path


def deb_build(tmp_dir, dsc_path, chroot_name,
              distribution, architecture, arch_any, arch_all, source,
              extra_repo):
    dst_dir = os.path.join(tmp_dir, "build", architecture)
    dsc_path = os.path.abspath(dsc_path)
    build_dir = os.path.join(dst_dir, "source")

    params = [
        "dpkg-buildpackage",
        "--unsigned-source",
        "--unsigned-changes",
        "--changes-option=-DDistribution=%s" % distribution,
        "-sa"
    ]

    build = []
    if source:
        build.append("source")
    if arch_any:
        build.append("any")
    if arch_all:
        build.append("all")

    if len(build) == 0:
        raise RuntimeError("Nothing to build")

    params.append("--build=" + ",".join(build))

    with docker(chroot_name) as chroot:
        if extra_repo is not None:
            name = '/etc/apt/sources.list.d/extra_repo.list'
            with chroot.create_file(name, user='root') as f:
                data = "%s\n" % (extra_repo)
                f.write(data.encode('ASCII'))

        chroot.check_call(["useradd", "--uid", str(os.getuid()), "build"], root=True)

        try:
            chroot.check_call(["mkdir", "-p", dst_dir])
            chroot.check_call(["dpkg-source", "-x", dsc_path, build_dir], cwd=dst_dir)
            chroot.check_call(["apt-get", "update", "--yes"], root=True)
            chroot.check_call(["apt-get", "upgrade", "--yes"], root=True)
            chroot.check_call(["apt-get-build-depends", "--yes"], cwd=build_dir, root=True)
            chroot.check_call(params, cwd=build_dir)
        except Exception:
            chroot.check_call(["bash"], cwd=build_dir, root=True)
            raise

    changes_file = None
    for name in os.listdir(dst_dir):
        if name.endswith(".changes"):
            if changes_file is not None:
                raise RuntimeError("Found more then one .changes files")
            changes_file = os.path.join(dst_dir, name)

    if changes_file is None:
        return None

    return changes_file


def rpm_build(tmp_dir, dsc_path, spec_path, chroot_name,
              distribution, architecture, arch_all, source):

    if spec_path is None:
        return None

    d = deb822.Dsc(open(dsc_path))

    dsc_dir = os.path.dirname(dsc_path)

    orig_name = None
    orig_path = None

    for f in d['files']:
        if f['name'].endswith('.orig.tar.gz'):
            orig_name = f['name']
            orig_path = os.path.join(dsc_dir, orig_name)

    assert orig_name is not None
    assert orig_path is not None

    dst_dir = os.path.join(tmp_dir, "SOURCES")
    dst_name = orig_name.replace('.orig.tar.gz', '.tar.gz')
    dst_path = os.path.join(dst_dir, dst_name)

    if not os.path.isdir(dst_dir):
        os.mkdir(dst_dir)

    shutil.copyfile(orig_path, dst_path)
    os.chmod(dst_path, 0o644)

    if source:
        source = "-ba"
    else:
        source = "-bb"

    with docker(chroot_name) as chroot:
        chroot.check_call([
            "yum-builddep", "-y",
            spec_path], root=True)

        chroot.check_call([
            "rpmbuild",
            "--define", "_topdir "+tmp_dir,
            source,
            spec_path])

    return True


def deb_sign(changes_file):
    try:
        check_call(["debsign", changes_file])
    except subprocess.CalledProcessError:
        print("Push any key to try signing again.")
        sys.stdin.readline()
        check_call(["debsign", changes_file])


def deb_lint(changes_file, chroot):
    with docker(chroot) as chroot:
        chroot.check_call(["apt-get", "update", "--yes"], root=True)
        chroot.check_call(["apt-get", "upgrade", "--yes"], root=True)
        chroot.check_call([
            "apt-get", "--yes", "-oDpkg::Options::=--force-confold",
            "install", "lintian"], root=True)
#        chroot.check_call([
#            "apt-get", "--yes", "-t", "experimental",
#            "install", "lintian4python"], root=True)
        chroot.check_call(["lintian", changes_file])
#        chroot.check_call(["lintian4py", changes_file])


def deb_test(changes_file, chroot, test_mode, extra_repo):
    if test_mode == "none":
        return
    elif test_mode == "manual_no_unpack":
        build_dir = os.path.dirname(changes_file)
        with docker(chroot) as chroot:
            chroot.check_call(["bash"], cwd=build_dir, root=True)
        return

    build_dir = os.path.dirname(changes_file)
    d = deb822.Changes(open(changes_file))

    debs = []
    for f in d['files']:
        if f['name'].endswith(".deb"):
            debs.append(os.path.join(build_dir, f['name']))

    with docker(chroot) as chroot:
        if extra_repo is not None:
            name = '/etc/apt/sources.list.d/extra_repo.list'
            with chroot.create_file(name, user='root') as f:
                data = "%s\n" % (extra_repo)
                f.write(data.encode('ASCII'))

        chroot.check_call(["apt-get", "update", "--yes"], root=True)
        chroot.check_call(["apt-get", "upgrade", "--yes"], root=True)
        chroot.check_call(["dpkg", "--unpack", "--"] + debs, root=True)
        chroot.check_call(
            ["apt-get", "--yes", "-f", "-oDpkg::Options::=--force-confold",
                "install"],
            root=True)

        if test_mode == "auto":
            pass
        elif test_mode == "manual":
            chroot.check_call(["bash"], cwd=build_dir, root=True)
        else:
            raise RuntimeError("Unknown test mode %s" % test_mode)


def deb_test_source_only(changes_file, test_mode):
    if test_mode == "none":
        return

    build_dir = os.path.dirname(changes_file)

    if test_mode == "auto":
        pass
    elif test_mode in ["manual", "manual_no_unpack"]:
        with chdir(build_dir):
            check_call(["bash"])
    else:
        raise RuntimeError("Unknown test mode %s" % test_mode)


def deb_upload(server, delayed, changes_file):
    with open(changes_file) as f:
        changes = deb822.Changes(f)

    unparsed = changes.get_as_string('Changes')
    parsed = []
    for line in unparsed.split("\n"):
        if line == "":
            continue
        elif line == " .":
            line = ""
        elif line[0] == " ":
            line = line[1:]
        else:
            assert False
        parsed.append(line)

    top_match = changelog.topline.match(parsed[0])
    distributions = top_match.group(3).lstrip()

    assert distributions == changes['Distribution']
    assert distributions != "UNRELEASED"

    if delayed > 0:
        check_call(["dput", "--delayed=%d" % delayed, server, changes_file])
    else:
        check_call(["dput", server, changes_file])


def rpm_lint(tmp_dir, chroot):
    rpms = []

    src_dir = os.path.join(tmp_dir, "SRPMS")
    for name in os.listdir(src_dir):
        rpms.append(os.path.join(src_dir, name))

    src_dir = os.path.join(tmp_dir, "RPMS")
    for name in os.listdir(src_dir):
        src_dir_2 = os.path.join(src_dir, name)
        for name_2 in os.listdir(src_dir_2):
            rpms.append(os.path.join(src_dir_2, name_2))

    with docker(chroot) as chroot:
        chroot.check_call(
            ["yum", "install", "--assumeyes", "--", "rpmlint"],
            root=True)
        chroot.check_call(["rpmlint"] + rpms)


def rpm_test(tmp_dir, chroot, test_mode):
    if test_mode == "none":
        return
    elif test_mode == "manual_no_unpack":
        with docker(chroot) as chroot:
            chroot.check_call(["bash"], cwd=tmp_dir, root=True)
        return

    rpms = []

    src_dir = os.path.join(tmp_dir, "RPMS")
    for name in os.listdir(src_dir):
        src_dir_2 = os.path.join(src_dir, name)
        for name_2 in os.listdir(src_dir_2):
            rpms.append(os.path.join(src_dir_2, name_2))

    with docker(chroot) as chroot:
        chroot.check_call(
            ["yum", "update", "--assumeyes"], root=True)
        chroot.check_call(
            ["yum", "localinstall", "--assumeyes", "--"] + rpms, root=True)

        if test_mode == "auto":
            pass
        elif test_mode == "manual":
            chroot.check_call(["bash"], cwd=tmp_dir, root=True)
        else:
            raise RuntimeError("Unknown test mode %s" % test_mode)


def rpm_upload(tmp_dir, dst_path):
    src_path = os.path.join(tmp_dir, "SRPMS", "")
    check_call(["rsync", "-rvp", src_path, dst_path])

    src_dir = os.path.join(tmp_dir, "RPMS")
    for name in os.listdir(src_dir):
        src_path = os.path.join(src_dir, name, "")
        check_call(["rsync", "-rvp", src_path, dst_path])


def pypi_upload(tmp_dir, dsc_path):
    dsc_path = os.path.abspath(dsc_path)
    build_dir = os.path.join(tmp_dir, "source")

    os.chdir(tmp_dir)
    check_call(["dpkg-source", "-x", dsc_path, build_dir])

    os.chdir(build_dir)
    check_call(["./setup.py", "sdist", "upload", "--signed"])


@contextmanager
def temp_dir():
    tmp_dir = tempfile.mkdtemp()
    cur_dir = os.getcwd()
    try:
        yield tmp_dir
    finally:
        os.chdir(cur_dir)
        shutil.rmtree(tmp_dir)


@contextmanager
def chdir(directory):
    old_dir = os.getcwd()
    try:
        os.chdir(directory)
        yield old_dir
    finally:
        os.chdir(old_dir)


def main():
    setup_logging()

    parser = argparse.ArgumentParser(
        description="Build Debian packages with sbuild.")

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "--dsc",
        dest="dsc_path",
        help="Act on dsc file.")
    group.add_argument(
        "--working",
        dest="working_dir",
        help="Act on tree in working directory.")

    parser.add_argument(
        "--upload",
        action="store_true",
        default=False,
        help="upload result")

    parser.add_argument(
        "--distros",
        choices=['debian', 'linuxpenguins', 'pypi'],
        action="append",
        default=[],
        help="build distros")

    parser.add_argument(
        "--distributions",
        choices=[
                 'buster', 'buster-security',
                 'bullseye', 'bullseye-security',
                 'sid', 'experimental',
                 'xenial',
                 'fedora20', 'centos6', 'centos7'
                ],
        action="append",
        default=[],
        help="build distributions")

    parser.add_argument(
        "--architectures",
        choices=['i386', 'amd64'],
        action="append",
        default=[],
        help="build architecture")

    parser.add_argument(
        "--delayed",
        choices=range(0, 15+1), default=0,
        type=int,
        help="Upload to a DELAYED queue, rather than the usual Incoming. "
             "This takes an argument from 0 to 15. Note  that  a "
             "delay of 0 is different from no delay at all.")

    parser.add_argument(
        "--test",
        choices=['none', 'auto', 'manual', 'manual_no_unpack'],
        default='auto',
        help="how to test?")

    args = parser.parse_args()

    if args.working_dir:
        dsc_path = deb_build_src(args.working_dir)
    else:
        dsc_path = args.dsc_path

    distros = set(args.distros)
    if len(distros) == 0:
        distros.add("debian")

    distributions = set(args.distributions)
    if len(distributions) == 0:
        if 'debian' in distros:
            distributions.add("sid")

    architectures = set(args.architectures)
    if len(architectures) == 0:
        architectures = ['i386', 'amd64']

    if 'debian' in distros:
        build = []
        source_upload = True
        if 'buster' in distributions:
            build.append('buster')
            if args.upload:
                raise RuntimeError("Cannot upload to buster")
        if 'bullseye' in distributions:
            build.append('bullseye')
            if args.upload:
                raise RuntimeError("Cannot upload to bullseye")
        if 'bullseye-security' in distributions:
            source_upload = False
            build.append('bullseye-security')
        if 'buster-security' in distributions:
            source_upload = False
            build.append('buster-security')
        if 'sid' in distributions:
            build.append('sid')
        if 'experimental' in distributions:
            build.append('experimental')

        source = True
        for distribution in build:
            arch_all = True

            real_distribution = distribution
            upload_distribution = distribution

            if upload_distribution == "sid":
                upload_distribution = "unstable"
            elif upload_distribution == "experimental":
                real_distribution = "sid"

            split = distribution.split("-")
            server = "ftp-master"
            if split[-1] == "security":
                server = "security-master"

            with temp_dir() as tmp_dir:
                tmp_dsc_path = deb_copy_source(tmp_dir, dsc_path)
                for architecture in architectures:
                    build_chroot = f"brianmay/debian-{architecture}:{real_distribution}"
                    test_chroot = f"brianmay/debian-{architecture}:{real_distribution}"
                    changes_file = deb_build(
                        tmp_dir, tmp_dsc_path, build_chroot,
                        upload_distribution, architecture, True, arch_all, source,
                        None,
                    )
                    if changes_file is not None:
                        deb_sign(changes_file)
                        if distribution in ["sid", "experimental"]:
                            deb_lint(changes_file, test_chroot)
                        deb_test(changes_file, test_chroot, args.test, None)
                        if not source_upload and args.upload and source:
                            deb_upload(server, args.delayed, changes_file)
                    arch_all = False
                    source = False

                if source_upload:
                    build_chroot = f"brianmay/debian-source:{real_distribution}"
                    test_chroot = f"brianmay/debian-source:{real_distribution}"
                    changes_file = deb_build(
                        tmp_dir, tmp_dsc_path, build_chroot,
                        upload_distribution, "source", False, False, True,
                        None)
                    if changes_file is not None:
                        deb_sign(changes_file)
                        deb_test_source_only(changes_file, args.test)
                        if args.upload:
                            deb_upload(server, args.delayed, changes_file)

    # end if 'debian' in distros:

    if 'pypi' in distros:
        with temp_dir() as tmp_dir:
            pypi_upload(tmp_dir, dsc_path)


if __name__ == "__main__":
    main()
